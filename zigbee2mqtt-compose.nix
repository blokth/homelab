# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."zigbee2mqtt" = {
    image = "ghcr.io/koenkk/zigbee2mqtt";
    environment = {
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/etc/zigbee2mqtt/configuration.yaml:/app/data/configuration.yaml:rw"
      "/run/udev:/run/udev:ro"
      "/var/lib/zigbee2mqtt:/app/data:rw"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.zigbee-secure.entrypoints" = "websecure";
      "traefik.http.routers.zigbee-secure.rule" = "Host(`zigbee.blokth.com`)";
      "traefik.http.routers.zigbee-secure.service" = "zigbee-service";
      "traefik.http.routers.zigbee-secure.tls" = "true";
      "traefik.http.services.zigbee-service.loadbalancer.server.port" = "8080";
    };
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/serial/by-id/usb-Itead_Sonoff_Zigbee_3.0_USB_Dongle_Plus_V2_7e901fb4640eef119316ba2a433abf1e-if00-port0:/dev/ttyACM0:rwm"
      "--network-alias=zigbee2mqtt"
      "--network=proxy"
    ];
  };
  systemd.services."docker-zigbee2mqtt" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-zigbee2mqtt-root.target"
    ];
    wantedBy = [
      "docker-compose-zigbee2mqtt-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-zigbee2mqtt-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
