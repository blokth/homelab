# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "pihole/pihole:latest";
    environment = {
      "FTLCONF_LOCAL_IPV4" = "192.168.88.192";
      "PIHOLE_DNS_" = "1.1.1.1;1.0.0.1";
      "TZ" = "Europe/Berlin";
      "WEBPASSWORD" = "changeme";
    };
    volumes = [
      "/Users/andrii/source/homelab/etc-dnsmasq.d:/etc/dnsmasq.d:rw"
      "/Users/andrii/source/homelab/etc-pihole:/etc/pihole:rw"
      "/etc/pihole/custom.list:/etc/pihole/custom.list:rw"
    ];
    ports = [
      "53:53/tcp"
      "53:53/udp"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.pihole-http.entrypoints" = "http";
      "traefik.http.routers.pihole-http.rule" = "Host(`pihole.blokth.com`)";
      "traefik.http.services.pihole-service.loadbalancer.server.port" = "80";
    };
    log-driver = "journald";
    extraOptions = [
      "--mac-address=02:42:ac:11:00:02"
      "--network-alias=pihole"
      "--network=pihole_pihole_network"
      "--network=traefik-public"
    ];
  };
  systemd.services."docker-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pihole_pihole_network.service"
    ];
    requires = [
      "docker-network-pihole_pihole_network.service"
    ];
    partOf = [
      "docker-compose-pihole-root.target"
    ];
    wantedBy = [
      "docker-compose-pihole-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-pihole_pihole_network" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f pihole_pihole_network";
    };
    script = ''
      docker network inspect pihole_pihole_network || docker network create pihole_pihole_network --driver=bridge --subnet=192.168.88.0/24
    '';
    partOf = [ "docker-compose-pihole-root.target" ];
    wantedBy = [ "docker-compose-pihole-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
