# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."homeassistant" = {
    image = "ghcr.io/home-assistant/home-assistant:stable";
    environment = {
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/run/udev:/run/udev:ro"
      "homeassistant_homeassistant_config:/config:rw"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.homeassistant-secure.entrypoints" = "websecure";
      "traefik.http.routers.homeassistant-secure.rule" = "Host(`home.blokth.com`)";
      "traefik.http.routers.homeassistant-secure.service" = "homeassistant-service";
      "traefik.http.routers.homeassistant-secure.tls" = "true";
      "traefik.http.services.homeassistant-service.loadbalancer.server.port" = "8123";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=homeassistant"
      "--network=proxy"
      "--privileged"
    ];
  };
  systemd.services."docker-homeassistant" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-volume-homeassistant_homeassistant_config.service"
    ];
    requires = [
      "docker-volume-homeassistant_homeassistant_config.service"
    ];
    partOf = [
      "docker-compose-homeassistant-root.target"
    ];
    wantedBy = [
      "docker-compose-homeassistant-root.target"
    ];
  };

  # Volumes
  systemd.services."docker-volume-homeassistant_homeassistant_config" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect homeassistant_homeassistant_config || docker volume create homeassistant_homeassistant_config
    '';
    partOf = [ "docker-compose-homeassistant-root.target" ];
    wantedBy = [ "docker-compose-homeassistant-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-homeassistant-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
