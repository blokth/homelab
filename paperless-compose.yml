services:
  broker:
    image: redis:7.4
    restart: unless-stopped
    volumes:
      - redisdata:/data
    networks:
      - paperless_internal

  db:
    image: postgres:17
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      # --- TEMPORARY PLACEHOLDER - MUST BE SECURED LATER ---
      POSTGRES_PASSWORD: changeme
    networks:
      - paperless_internal

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db
      - broker
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - consume:/usr/src/paperless/consume
      - export:/usr/src/paperless/export
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBENGINE: postgresql
      PAPERLESS_DBHOST: db
      PAPERLESS_DBPORT: 5432
      PAPERLESS_DBNAME: paperless
      PAPERLESS_DBUSER: paperless
      # --- TEMPORARY PLACEHOLDER - MUST BE SECURED LATER ---
      PAPERLESS_DBPASS: changeme
      # --- TEMPORARY PLACEHOLDER - MUST BE SECURED LATER ---
      PAPERLESS_SECRET_KEY: changeme
      PAPERLESS_TIME_ZONE: Europe/Berlin
    networks:
      - proxy
      - paperless_internal
    labels:
      traefik.enable: "true"
      
      # Define the main HTTPS router for Paperless
      traefik.http.routers.paperless-secure.entrypoints: "websecure"
      traefik.http.routers.paperless-secure.rule: "Host(`papers.blokth.com`)"
      traefik.http.routers.paperless-secure.tls: "true" # Enable TLS for this router
      traefik.http.routers.paperless-secure.service: "paperless-service"

      # Define the service (points to the container)
      traefik.http.services.paperless-service.loadbalancer.server.port: "8000"

volumes:
  data:
  media:
  consume:
  export:
  postgres_data:
  redisdata:

networks:
  proxy:
    external: true
  paperless_internal:
    driver: bridge
