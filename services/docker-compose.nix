# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."simple-service" = {
    image = "traefik/whoami";
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.whoami.entrypoints" = "web";
      "traefik.http.routers.whoami.rule" = "Host(`whoami.home`)";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=whoami"
      "--network=homelab_traefiknet"
    ];
  };
  systemd.services."docker-simple-service" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-homelab_traefiknet.service"
    ];
    requires = [
      "docker-network-homelab_traefiknet.service"
    ];
    partOf = [
      "docker-compose-homelab-root.target"
    ];
    wantedBy = [
      "docker-compose-homelab-root.target"
    ];
  };
  virtualisation.oci-containers.containers."traefik" = {
    image = "traefik:v3.2";
    volumes = [
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    ports = [
      "80:80/tcp"
      "8080:8080/tcp"
    ];
    cmd = [ "--api.insecure=true" "--providers.docker=true" "--providers.docker.exposedbydefault=false" "--entryPoints.web.address=:80" ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=traefik"
      "--network=homelab_traefiknet"
    ];
  };
  systemd.services."docker-traefik" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-homelab_traefiknet.service"
    ];
    requires = [
      "docker-network-homelab_traefiknet.service"
    ];
    partOf = [
      "docker-compose-homelab-root.target"
    ];
    wantedBy = [
      "docker-compose-homelab-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-homelab_traefiknet" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f homelab_traefiknet";
    };
    script = ''
      docker network inspect homelab_traefiknet || docker network create homelab_traefiknet
    '';
    partOf = [ "docker-compose-homelab-root.target" ];
    wantedBy = [ "docker-compose-homelab-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-homelab-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
