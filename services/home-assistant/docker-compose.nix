# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."home-assistant" = {
    image = "homeassistant/home-assistant:latest";
    environment = {
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/Users/andrii/homelab/services/home-assistant/config:/config:rw"
      "/etc/localtime:/etc/localtime:ro"
    ];
    ports = [
      "8123:8123/tcp"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.home-assistant.entrypoints" = "web";
      "traefik.http.routers.home-assistant.rule" = "Host(`home-assistant.home.arpa`)";
      "traefik.http.services.home-assistant.loadbalancer.server.port" = "8123";
    };
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--cap-add=NET_BIND_SERVICE"
      "--cap-add=SYS_ADMIN"
      "--health-cmd=[\"curl\", \"-f\", \"http://192.168.88.189:8123\"]"
      "--health-interval=30s"
      "--health-retries=10"
      "--health-timeout=10s"
      "--network=host"
      "--privileged"
    ];
  };
  systemd.services."docker-home-assistant" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-home-assistant-root.target"
    ];
    wantedBy = [
      "docker-compose-home-assistant-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-home-assistant-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
